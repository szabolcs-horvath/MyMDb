@page "/movies/{movieId:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (_movie is null)
{
    @if (_notFound)
    {
        <PageTitle>Not found</PageTitle>

        <MudText>Couldn't find the title matching the given ID</MudText>
    } else
    {
        <MudProgressLinear Color="Color.Secondary"
                           Indeterminate="true" />
    }
}
else
{
    <PageTitle>@_movie.Title</PageTitle>

    <MudPaper Class="pa-4 mt-4" 
              Elevation="10">
        <MudText Typo="Typo.h3"
                 GutterBottom="true"
                 Class="mt-4">
            @($"{_movie.Title} ({_movie.Year})")
        </MudText>

        <MudText Typo="Typo.subtitle2">
            @($"{_movie.Runtimemins} minutes | {_movie.ReleaseDate}")
        </MudText>

        <MudStack Row="true">
            <MudText Typo="Typo.h6"
                     Class="mt-5">
                Genres:
            </MudText>

            <MudChipSet Class="mt-4" >
                @foreach (var genre in _movie.Genres)
                {
                    <MudChip Text="@genre" />
                }
            </MudChipSet>

            <AuthorizeView Roles="Admin">
                <MudTooltip Text="Delete title from database">
                    <MudIconButton Icon="@Icons.Filled.DeleteForever"
                                   Color="Color.Error" 
                                   Size="Size.Large"
                                   OnClick="DeleteMovieAsync"
                                   Class="mt-1" />
                </MudTooltip>
            </AuthorizeView>
        </MudStack>
        
        @*<MudText Typo="Typo.h6"
                 Class="mt-2">
            IMDb Rating: @_movie.IMDbRating
        </MudText>*@
        
        <AuthorizeView>
            <Authorized>
                @if (_rating is not null) {
                    <MudStack Row="true">
                        <MudFab Icon="@Icons.Filled.StarRate"
                                IconColor="Color.Warning"
                                Variant="Variant.Outlined"
                                Size="Size.Small"
                                OnClick="OpenRatingDialog"
                                Class="mt-1"/>
                        <MudText Typo="Typo.h5"
                                    Class="mt-3">
                            Your Rating:
                        </MudText>
                        <MudRating @bind-SelectedValue="_selectedValue"
                                    Disabled="true"
                                    Color="Color.Warning"
                                    MaxValue="10"
                                    Size="Size.Large"
                                    Class="mt-2"/>
                        <MudText Typo="Typo.h5"
                                    Color="Color.Warning"
                                    Class="mt-3">
                            @_ratingText
                        </MudText>
                    </MudStack>
                } else
                {
                    <MudStack Row="true">
                        <MudFab Icon="@Icons.Filled.StarRate"
                                Variant="Variant.Filled"
                                Color="Color.Warning"
                                Size="Size.Small"
                                Class="mt-1"
                                OnClick="OpenRatingDialog"/>
                        <MudText Typo="Typo.h6"
                                    Color="Color.Warning"
                                    Class="mt-3">
                            Rate this title!
                        </MudText>
                    </MudStack>
                }
            </Authorized>
            <NotAuthorized>
                <MudText Typo="Typo.h6"
                            Color="Color.Warning"
                            Class="mt-3">
                    Log in to rate this title!
                </MudText>
            </NotAuthorized>
        </AuthorizeView>
        

        <MudGrid Class="mt-2">
            <MudItem xs="12"
                     sm="7" >
                <MudText Typo="Typo.h6">
                    Cast:
                </MudText>
                
                @if (_cast.Any())
                {
                    <MudList>
                        @foreach (var person in _cast)
                        {
                            <MudListItem Icon="@Icons.TwoTone.Person"
                                         IconColor="@Color.Primary"
                                         IconSize="Size.Medium"
                                         Href="@($"/people/{person.Id}")">
                                @person.FullName
                            </MudListItem>
                        }
                    </MudList>
                }
            </MudItem>

            <MudItem xs="12"
                     sm="5" >
                <MudText Typo="Typo.h6">
                    Director(s):
                </MudText>
                
                @if (_directors.Any())
                {
                    <MudList>
                        @foreach (var person in _directors)
                        {
                            <MudListItem Icon="@Icons.TwoTone.Person"
                                         IconColor="@Color.Primary"
                                         IconSize="Size.Medium"
                                         Href="@($"/people/{person.Id}")">
                                @person.FullName
                            </MudListItem>
                        }
                    </MudList>
                }
            </MudItem>

            @if(_reviews.Count() > 0) {
                <MudItem xs="12">
                    <MudStack Row="true">
                         <MudFab Icon="@Icons.Filled.RateReview"
                                 Style="@($"color:{Colors.LightBlue.Default}")"
                                 Variant="Variant.Outlined"
                                 Size="Size.Small"
                                 OnClick="OpenReviewDialog"
                                 Class="mt-1"/>

                        <MudText Typo="Typo.h6"
                                 Class="mt-2">
                            Reviews:
                        </MudText>
                    </MudStack>

                    <MudList>
                        @foreach (var review in _reviews)
                        {
                            //TODO if spoiler, hide by default
                            <MudListItem Style=@($"border: solid; border-radius: 20px; border-color: {Colors.LightBlue.Default}")
                                         Class="mb-1" >
                                <MudStack Row="true">
                                    <MudText Typo="Typo.h6"
                                             Style="@($"color:{Colors.Blue.Default}")">
                                        @review.User.Username:
                                    </MudText>

                                    <MudText Typo="Typo.h6">
                                        @review.Review.Headline
                                    </MudText>

                                    @if(review.Rating is not null) {
                                        <MudSpacer />

                                        <MudIcon Icon="@Icons.Filled.StarRate"
                                                 Style="@($"color:{Colors.Amber.Default}")"
                                                 Size="Size.Medium"
                                                 Class="mt-1"/>

                                        <MudText Typo="Typo.h6"
                                                 Style="@($"color:{Colors.Amber.Default}")">
                                            @review.Rating.Score/10
                                        </MudText>
                                    }
                                </MudStack>

                                <MudText>
                                    @review.Review.Description
                                </MudText>
                            </MudListItem>
                        }
                    </MudList>
                </MudItem>
            }
        </MudGrid>
    </MudPaper>

    <MudDialog @bind-IsVisible="_ratingDialogVisible" 
               Options="_dialogOptions">
        <TitleContent>
            <MudText Typo="Typo.h6"
                     Class="mt-5">
                Rate @_movie.Title
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudPaper MinWidth="440px"
                      Elevation="0">
                <MudStack Row="true"
                          Class="m-2">
                    <MudRating @bind-SelectedValue="_dialogSelectedValue"
                               HoveredValueChanged="HandleDialogHoveredValueChanged"
                               MaxValue="10"
                               Size="Size.Large"/>
                    <MudText Typo="Typo.h5"
                             Color="Color.Warning"
                             Class="mt-1">
                        @_dialogRatingText
                    </MudText>
                </MudStack>
            </MudPaper>
        </DialogContent>
        <DialogActions>
            <MudStack Row="true"
                      Spacing="10"
                      Justify="Justify.SpaceAround"
                      AlignItems="AlignItems.Center">
                <MudButton Color="Color.Error"
                           Variant="Variant.Filled"
                           OnClick="HandleRatingCancel"
                           Class="ml-4">
                    Cancel
                </MudButton>
                <MudButton Color="Color.Error"
                           Variant="Variant.Outlined"
                           OnClick="HandleRatingDelete"
                           Disabled="@(_rating is null)"
                           Class="mx-2">
                    Delete Your Rating
                </MudButton>
                <MudButton Color="Color.Success"
                           Variant="Variant.Filled"
                           Disabled="@(_dialogSelectedValue == 0)"
                           OnClick="HandleRatingConfirm"
                           Class="mr-4">
                    Confirm
                </MudButton>
            </MudStack>
        </DialogActions>
    </MudDialog>

    <MudDialog @bind-IsVisible="_reviewDialogVisible"
               Options="_dialogOptions" >
        <TitleContent>

        </TitleContent>
        <DialogContent>
            <MudPaper MinWidth="440px"
                      Elevation="0" >

            </MudPaper>
        </DialogContent>
        <DialogActions>

        </DialogActions>
    </MudDialog>
}


@code {
    [Parameter] public int MovieId { get; set; }
    [CascadingParameter] Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    MovieResponse? _movie;
    List<PersonBasicResponse> _cast = new();
    List<PersonBasicResponse> _directors = new();

    RatingBasicResponse? _rating;

    List<ReviewData> _reviews = new();

    ClaimsPrincipal? _user;
    int? _userId;
    bool _isAuthenticated;
    bool _notFound;

    int? _activeValue;
    int _selectedValue;
    string _ratingText = string.Empty;

    int? _dialogActiveValue;
    int _dialogSelectedValue;
    string _dialogRatingText = "?/10";
    bool _ratingDialogVisible;

    bool _reviewDialogVisible;

    DialogOptions _dialogOptions = new()
    {
        CloseOnEscapeKey = true,
        MaxWidth = MaxWidth.Large,
        CloseButton = true
    };

    protected override async Task OnParametersSetAsync()
    {
        await InitUser();
        await InitMovie();
        await InitRatings();
        await InitReviews();
        UpdateRatingSelectedValue();
    }

    async Task InitUser()
    {
        if (AuthenticationStateTask is not null)
        {
            var authState = await AuthenticationStateTask;
            _user = authState.User;

            if (_user?.Identity is not null)
            {
                _isAuthenticated = _user.Identity.IsAuthenticated;
                var userIdString = _user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value;

                if (userIdString is not null)
                {
                    _userId = int.Parse(userIdString);
                }
            }
        }
    }

    async Task InitMovie()
    {
        _movie = await Http.GetFromJsonAsync<MovieResponse>($"api/movie/{MovieId}?extended=full");

        if (_movie is null)
        {
            _notFound = true;
        }
        else
        {
            if (_movie.People is not null)
            {
                if (_movie.Cast is not null)
                {
                    _cast = _movie.People.Where(p => _movie.Cast.Contains(p.FullName)).ToList();
                }
                if (_movie.Directors is not null)
                {
                    _directors = _movie.People.Where(p => _movie.Directors.Contains(p.FullName)).ToList();
                }
            }
        }
    }

    async Task InitRatings()
    {
        if (_movie is not null) {
            var usersRating = _movie.Ratings?.FirstOrDefault(r => r.MyMDbUserId == _userId);

            if (usersRating is not null)
            {
                _rating = usersRating;
                _dialogSelectedValue = _rating.Score;
                UpdateDialogRatingText();
            }
        }
    }

    async Task InitReviews()
    {
        if (_movie is not null)
        {
            List<ReviewBasicResponse>? moviesReviews = (List<ReviewBasicResponse>?)_movie?.Reviews;

            if (moviesReviews is not null)
            {
                foreach (var review in moviesReviews)
                {
                    MyMDbUserResponse? userForReview = await Http.GetFromJsonAsync<MyMDbUserResponse>($"api/user/{review.MyMDbUserId}");
                    RatingBasicResponse? ratingForUser;

                    if (userForReview is not null && _movie?.Ratings is not null)
                    {
                        ratingForUser = _movie.Ratings.FirstOrDefault(r => r.MyMDbUserId == userForReview.Id);

                        _reviews.Add(new ReviewData
                        {
                            Review = review,
                            User = userForReview,
                            Rating = ratingForUser
                        });
                    }
                }

                if (_rating is not null) {
                    var loggedInReview = _reviews.FirstOrDefault(r => r.Rating.Id == _rating.Id);

                    if (loggedInReview is not null)
                    {
                        loggedInReview.Rating = _rating;
                    }
                }
            }
        }
    }

    void UpdateRatingSelectedValue()
    {
        _selectedValue = _rating?.Score ?? 0;
        UpdateRatingText();
    }

    void UpdateRatingText()
    {
        if (_activeValue is > 0)
        {
            _ratingText = $"{_activeValue.ToString()}/10";
        }
        else if (_rating?.Score is > 0)
        {
            _ratingText = $"{_rating.Score.ToString()}/10";
        }
        else
        {
            _ratingText = string.Empty;
        }
    }

    void OpenRatingDialog()
    {
        _ratingDialogVisible = true;
    }

    void OpenReviewDialog()
    {
        _reviewDialogVisible = true;
    }

    void HandleDialogHoveredValueChanged(int? val)
    {
        _dialogActiveValue = val;
        UpdateDialogRatingText();
    }

    void UpdateDialogRatingText()
    {
        if (_dialogActiveValue is > 0)
        {
            _dialogRatingText = $"{_dialogActiveValue.ToString()}/10";
        }
        else if (_dialogSelectedValue > 0)
        {
            _dialogRatingText = $"{_dialogSelectedValue.ToString()}/10";
        }
        else
        {
            _dialogRatingText = "?/10";
        }
    }

    void HandleRatingCancel()
    {
        _dialogSelectedValue = _rating?.Score ?? 0;
        UpdateDialogRatingText();
        _ratingDialogVisible = false;
    }

    async Task HandleRatingConfirm()
    {
        if (_dialogSelectedValue > 0)
        {
            if (_rating is null)
            {
                await AddRatingAsync(_dialogSelectedValue);
            }
            else
            {
                await UpdateRatingAsync(_dialogSelectedValue);
            }
        }
        _ratingDialogVisible = false;
    }

    async Task HandleRatingDelete()
    {
        await DeleteRatingAsync();
        _ratingDialogVisible = false;
    }

    async Task AddRatingAsync(int rating)
    {
        if (_isAuthenticated && _userId is not null && _movie is not null)
        {
            var dto = new RatingCreateDto
            {
                MovieId = _movie.Id,
                MyMDbUserId = (int)_userId,
                Score = rating
            };

            var response = await Http.PostAsJsonAsync("api/rating", dto);

            if (response.IsSuccessStatusCode)
            {
                _rating = await response.Content.ReadFromJsonAsync<RatingBasicResponse>();
                UpdateRatingSelectedValue();

                var loggedInReview = _reviews.FirstOrDefault(r => r.Rating.Id == _rating.Id);

                if (loggedInReview is not null)
                {
                    loggedInReview.Rating = _rating;
                }

                Snackbar.Add("Rating successfully added!", Severity.Success);
            }
            else
            {
                _selectedValue = 0;
                UpdateRatingText();
                Snackbar.Add("Couldn't add rating!", Severity.Error);
            }
        }
    }

    async Task UpdateRatingAsync(int rating)
    {
        if (_rating is not null && rating != _selectedValue)
        {
            var dto = new RatingUpdateDto
            {
                Score = rating
            };
            var serializedContent = JsonSerializer.Serialize(dto);
            var httpContent = new StringContent(serializedContent, Encoding.UTF8, "application/json");
            var response = await Http.PatchAsync($"api/rating/{_rating.Id}", httpContent);

            if (response.IsSuccessStatusCode)
            {
                var updatedRating = await response.Content.ReadFromJsonAsync<RatingBasicResponse>();

                if (updatedRating is not null)
                {
                    _rating = updatedRating;
                    UpdateRatingSelectedValue();
                    Snackbar.Add("Rating successfully updated!", Severity.Success);
                }
            }
            else
            {
                UpdateRatingSelectedValue();
                Snackbar.Add("Couldn't update rating!", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("The submitted rating is the same as the current one.", Severity.Info);
        }
    }

    async Task DeleteRatingAsync()
    {
        if (_rating is not null)
        {
            var response = await Http.DeleteAsync($"api/Rating/{_rating.Id}");

            if (response.IsSuccessStatusCode)
            {
                _rating = null;
                UpdateRatingSelectedValue();
                _dialogSelectedValue = 0;
                UpdateDialogRatingText();
                Snackbar.Add("Rating successfully deleted!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Couldn't delete rating!", Severity.Error);
            }
        }
    }

    async Task DeleteMovieAsync()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true
        };

        var dialog = DialogService.Show<DeleteTitleDialog>(_movie?.Title, options);

        if (!(await dialog.Result).Cancelled)
        {
            if (_movie != null)
            {
                var response = await Http.DeleteAsync($"api/movie/{_movie.Id}");

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add($"Title '{_movie.Title}' deleted", Severity.Success);
                    NavigationManager.NavigateTo("/movies");
                }
            }
        }
    }

    class ReviewData
    {
        public ReviewBasicResponse Review { get; set; }
        public MyMDbUserResponse User { get; set; }
        public RatingBasicResponse Rating { get; set; }
    }

}
