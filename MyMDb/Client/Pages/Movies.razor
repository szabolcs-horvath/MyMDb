@page "/movies"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Movies and Shows</PageTitle>

<MudText Typo="Typo.h3"
         GutterBottom="true"
         Color="Color.Secondary"
         Class="mt-4">
    Movies and Shows
</MudText>

@if (_movies == null)
{
    <MudProgressLinear Color="Color.Secondary" 
                       Indeterminate="true" />
}
else
{
    <MudPaper Class="pa-4" 
              Elevation="10">
        <MudTable Items="_movies" 
                  Height="400px"
                  Hover="true" 
                  Striped="true"
                  SortLabel="Sort By"
                  FixedHeader=true
                  Virtualize="true"
                  Filter="new Func<DisplayMovie, bool>(FilterCheck)" 
                  T="DisplayMovie"
                  OnRowClick="@RowClicked">
            <ColGroup>
                <col />
                <col style="width: 12%" />
                <col style="width: 10%" />
                <col style="width: 10%" />
                <col style="width: 25%" />
                <col style="width: 12%" />
            </ColGroup>
            <ToolBarContent>
                <MudText Typo="Typo.h6">
                    Movies
                </MudText>
                <MudSpacer />
                <MudAutocomplete @bind-Value="@_searchTerm"
                                 Placeholder="Search by title"
                                 ResetValueOnEmptyText="true"
                                 SearchFunc="@AutocompletePopulate"
                                 CoerceValue="true"
                                 Margin="Margin.Dense" 
                                 Dense="true"
                                 Adornment="Adornment.Start"
                                 AdornmentIcon="@Icons.Material.Filled.Search" 
                                 IconSize="Size.Medium"
                                 Class="mt-0" />
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<DisplayMovie, object>(x => x.Title)">
                        Title
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<DisplayMovie, object>(x => x.ImDbRating)">
                        IMDb Rating
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<DisplayMovie, object>(x => x.Runtimemins)">
                        Runtime
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<DisplayMovie, object>(x => x.Year)">
                        Year
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<DisplayMovie, object>(x => x.Directors)">
                        Director(s)
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="@(new Func<DisplayMovie, object>(x => x.ReleaseDate ?? "-"))">
                        Release Date
                    </MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Title">
                    @context.Title
                </MudTd>
                <MudTd DataLabel="IMDb Rating">
                    @context.ImDbRating
                </MudTd>
                <MudTd DataLabel="Runtime">
                    @context.Runtimemins
                </MudTd>
                <MudTd DataLabel="Year">
                    @context.Year
                </MudTd>
                <MudTd DataLabel="Director(s)">
                    @context.Directors
                </MudTd>
                <MudTd DataLabel="Release Date">
                    @context.ReleaseDate
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new[]{10, 20, 50, 100}" />
            </PagerContent>
        </MudTable>
    </MudPaper>
}

@code {
    IEnumerable<DisplayMovie>? _movies;
    string? _searchTerm = string.Empty;

    private bool FilterCheck(DisplayMovie movie)
    {
        return movie.Title.Contains(_searchTerm ?? "");
    }

    private Task<IEnumerable<string>> AutocompletePopulate(string? value)
    {
        if (_movies is null)
        {
            return Task.FromResult(Enumerable.Empty<string>());
        }
        return Task.FromResult(_movies.Select(m => m.Title).Where(m => m.Contains(value ?? "", StringComparison.InvariantCultureIgnoreCase)));
    }

    private void RowClicked(TableRowClickEventArgs<DisplayMovie> args)
    {
        NavigationManager.NavigateTo($"/movies/{args.Item.Id}", false);
    }

    private class DisplayMovie
    {
        public DisplayMovie(MovieResponse value)
        {
            Id = value.Id;
            Title = value.Title;
            ImDbRating = value.IMDbRating;
            Runtimemins = value.Runtimemins;
            Year = value.Year;
            Directors = value.Directors == null ? "" : string.Join(", ", value.Directors);
            ReleaseDate = value.ReleaseDate;
        }
        public int Id { get; }
        public string Title { get; }
        public double ImDbRating { get; }
        public int Runtimemins { get; }
        public int Year { get; }
        public string Directors { get; }
        public string? ReleaseDate { get; }

    }

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<MovieResponse[]>("api/movie");
        if (result != null)
        {
            List<DisplayMovie> temp = new List<DisplayMovie>(result.Length);
            foreach (MovieResponse m in result) {
                temp.Add(new DisplayMovie(m));
            }
            _movies = temp;
        }
    }
}
