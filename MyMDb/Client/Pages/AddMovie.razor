@page "/addmovie"
@using MyMDb.Shared.CreateModel
@using System.Text.RegularExpressions
@inject HttpClient Http
@inject ISnackbar Snackbar

<PageTitle>Add a Movie or Show</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true" Color="Color.Secondary" Class="mt-4" >Add a new movie or show to the database</MudText>

<MudPaper Class="pa-4" Elevation="10">
    <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors" >
        <MudGrid Spacing="1" >
            <MudItem xs="12" sm="7">
                <MudGrid Spacing="1">
                    <MudItem xs="12">
                        <MudTextField Label="Title" @bind-Value="Title" Margin="Margin.Dense" Variant="Variant.Outlined"
                            Required="true" RequiredError="Title is required" />
                    </MudItem>

                    <MudItem xs="8">
                        <MudSelect Label="Title type" @bind-Value="TitleType" Margin="Margin.Dense"
                        Variant="Variant.Outlined" Dense="true" AnchorOrigin="Origin.BottomCenter"
                        Required="true" RequiredError="Title type is required" >
                            <MudSelectItem Value="@("Movie")" />
                            <MudSelectItem Value="@("TV Series")" />
                            <MudSelectItem Value="@("TV Mini Series")" />
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="4">
                        <MudNumericField Label="Year" T="int" @bind-Value="Year" Margin="Margin.Dense"
                        Variant="Variant.Outlined" Immediate="true" Step="1"
                        Required="true" RequiredError="Year is required" Validation="@(new Func<int, string>(YearCheck))" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudDatePicker @ref="_releaseDateDatePicker" Label="Release date" @bind-Date="ReleaseDate" PickerVariant="PickerVariant.Dialog" Editable="true" AutoClose="true"
                            Mask=@(new DateMask("yyyy-MM-dd")) DateFormat="yyyy-MM-dd" Margin="Margin.Dense" Variant="Variant.Outlined"
                            Required="true" RequiredError="Release date is required" />
                    </MudItem>
                        
                    <MudItem xs="2">
                        <MudNumericField Label="IMDb rating" T="decimal" @bind-Value="IMDbRating" Margin="Margin.Dense" Variant="Variant.Outlined" Immediate="true"
                            Min="0.0M" Max="10.0M" Step=".1M" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.StarRate" AdornmentColor="Color.Warning"
                            Required="true" RequiredError="IMDb rating is required" Validation="@(new Func<decimal, string>(RatingCheck))" />
                    </MudItem>

                    <MudItem xs="10">
                        <MudTextField Label="IMDb URL" @bind-Value="URL" Margin="Margin.Dense" Variant="Variant.Outlined"
                        Required="true" RequiredError="IMDb URL is required" Validation="@(new Func<string, string>(URLFormatCheck))" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudNumericField Label="Runtime" T="int" @bind-Value="Runtimemins" Margin="Margin.Dense" 
                        Variant="Variant.Outlined" HideSpinButtons="true" Adornment="Adornment.End" AdornmentText="minutes"
                        Required="true" RequiredError="Runtime is required" Validation="@(new Func<int, string>(RuntimeCheck))" />
                    </MudItem>

                    <MudItem xs="2">
                        <MudNumericField Label="Your rating" T="int" @bind-Value="YourRating" Margin="Margin.Dense" Variant="Variant.Outlined" Immediate="true" 
                            Min="0" Max="10" Step="1" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.StarRate" AdornmentColor="Color.Warning" />
                    </MudItem>

                    <MudItem xs="10">
                        <MudDatePicker @ref="_dateRatedDatePicker" Label="Date rated" @bind-Date="DateRated" PickerVariant="PickerVariant.Dialog" Editable="true" AutoClose="true"
                            Mask=@(new DateMask("yyyy-MM-dd")) DateFormat="yyyy-MM-dd" Margin="Margin.Dense" Variant="Variant.Outlined" />
                    </MudItem>
                </MudGrid>
            </MudItem>

            <MudItem xs="12" sm="5" >
                <MudGrid Spacing="1" >
                    <MudItem xs="2" >
                        <MudIconButton xs="2" Icon="@Icons.Material.Filled.Add" OnClick="AddGenreChip" />
                    </MudItem>

                    <MudItem xs="10" >
                        <MudTextField Label="Add new genre" @bind-Value="NewGenre" Margin="Margin.Dense" Variant="Variant.Outlined" />
                    </MudItem>

                    <MudItem xs="12" >
                        <MudChipSet AllClosable="true" OnClose="CloseGenreChip" >
                            @foreach (var chip in genres) 
                            {
                                <MudChip Text="@chip" />
                            }
                        </MudChipSet>
                    </MudItem>


                    <MudItem xs="2" >
                        <MudIconButton xs="2" Icon="@Icons.Material.Filled.Add" OnClick="AddDirectorChip" />
                    </MudItem>

                    <MudItem xs="10" >
                        <MudTextField Label="Add a director" @bind-Value="NewDirector" Margin="Margin.Dense" Variant="Variant.Outlined" />
                    </MudItem>

                    <MudItem xs="12" >
                        <MudChipSet AllClosable="true" OnClose="CloseDirectorChip" >
                            @foreach (var chip in directors) 
                            {
                                <MudChip Text="@chip" />
                            }
                        </MudChipSet>
                    </MudItem>

                    <MudItem xs="2" >
                        <MudIconButton xs="2" Icon="@Icons.Material.Filled.Add" OnClick="AddCastChip" />
                    </MudItem>

                    <MudItem xs="10" >
                        <MudTextField Label="Add an actor/actress" @bind-Value="NewCast" Margin="Margin.Dense" Variant="Variant.Outlined" />
                    </MudItem>

                    <MudItem xs="12" >
                        <MudChipSet AllClosable="true" OnClose="CloseCastChip" >
                            @foreach (var chip in cast) 
                            {
                                <MudChip Text="@chip" />
                            }
                        </MudChipSet>
                    </MudItem>

                    <MudItem xs="12">
                        @foreach (var error in _errors)
                        {
                            <MudText Color="@Color.Error">@error</MudText>
                        }
                    </MudItem>

                </MudGrid>
            </MudItem>

            <MudItem xs="12" >
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit">Submit</MudButton>
            </MudItem>
        </MudGrid>
    </MudForm>
</MudPaper>

@code {
    bool _success;
    string[] _errors = { };
    MudForm? _form;
    MudDatePicker? _releaseDateDatePicker;
    MudDatePicker? _dateRatedDatePicker;

    Regex urlRegex = new Regex(@"https://www\.imdb\.com/title/tt[0-9]*/.*");
    List<string> genres = new List<string>();
    List<string> directors = new List<string>();
    List<string> cast = new List<string>();

    public string Title { get; set; } = string.Empty;
    public DateTime? ReleaseDate { get; set; }
    public int Year { get; set; }
    public string TitleType { get; set; } = string.Empty;
    public decimal IMDbRating { get; set; }
    public string URL { get; set; } = string.Empty;
    public int Runtimemins { get; set; }
    public int YourRating { get; set; }
    public DateTime? DateRated { get; set; }
    public string NewGenre { get; set; } = string.Empty;
    public string NewDirector { get; set; } = string.Empty;
    public string NewCast { get; set; } = string.Empty;

    public void AddGenreChip()
    {
        if (!string.IsNullOrEmpty(NewGenre))
        {
            genres.Add(NewGenre);
            NewGenre = string.Empty;
        }
    }

    public void CloseGenreChip(MudChip chip) => genres.Remove(chip.Text);

    public void AddDirectorChip()
    {
        if (!string.IsNullOrEmpty(NewDirector))
        {
            directors.Add(NewDirector);
            NewDirector = string.Empty;
        }
    }

    public void CloseDirectorChip(MudChip chip) => directors.Remove(chip.Text);

    public void AddCastChip()
    {
        if (!string.IsNullOrEmpty(NewCast))
        {
            cast.Add(NewCast);
            NewCast = string.Empty;
        }
    }

    public void CloseCastChip(MudChip chip) => cast.Remove(chip.Text);

    public string YearCheck(int arg)
    {
        return arg > 1800 ? null : "There were no movies made before the 1800s";
    }

    public string URLFormatCheck(string arg)
    {
        var doesMatch = urlRegex.IsMatch(arg);
        return doesMatch ? null : "The specified URL's format is incorrect (eg https://www.imdb.com/title/tt2582802/)";
    }

    public string RatingCheck(decimal arg)
    {
        return arg != 0M ? null : "IMDB rating cannot be 0";
    }

    public string RuntimeCheck(int arg)
    {
        return arg > 0 ? null : "Runtime must be larger than 0";
    }

    public string GenresCheck(List<string> args) {
        return args.Count != 0 ? null : "You must add at least 1 Genre";
    }

    public async void Submit()
    {
        var genresCheckResult = GenresCheck(genres);
        if (genresCheckResult is not null)
        {
            return;
        }

        await _form.Validate();
        if (_form.IsValid)
        {
            var movie = new CreateMovie
            {
                YourRating = this.YourRating,
                DateRated = this.DateRated?.ToString("yyyy-MM-dd"),
                Title = this.Title,
                URL = this.URL,
                TitleType = this.TitleType,
                IMDbRating = Decimal.ToDouble(this.IMDbRating),
                Runtimemins = this.Runtimemins,
                Year = this.Year,
                Genres = string.Join(", ", this.genres),
                ReleaseDate = this.ReleaseDate?.ToString("yyyy-MM-dd"),
                Directors = string.Join(", ", this.directors),
                Cast = string.Join(", ", this.cast)
            };

            var result = await Http.PostAsJsonAsync<CreateMovie>("api/movie", movie);

            var testString = string.Join(", ", this.genres);
            Console.WriteLine(testString);

            if (result.IsSuccessStatusCode)
            {
                _form.Reset();
                _releaseDateDatePicker.Reset();
                _dateRatedDatePicker.Reset();
                genres.RemoveAll(_ => true);
                directors.RemoveAll(_ => true);
                cast.RemoveAll(_ => true);
                StateHasChanged();
                Snackbar.Add("Title successfully added", Severity.Success);
            }
        }
    }
}