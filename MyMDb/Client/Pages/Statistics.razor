@page "/statistics"
@inject HttpClient Http

<PageTitle>Statistics</PageTitle>

<MudText Typo="Typo.h3"
         GutterBottom="true"
         Color="Color.Secondary"
         Class="mt-4">
    Statistics
</MudText>

@if (_movies == null)
{
    <MudProgressLinear Color="Color.Secondary" 
                       Indeterminate="true" />
}
else
{
    <MudPaper Class="pa-4"
              Elevation="10">
        <MudGrid>
            <MudItem xs="12"
                     sm="6">
                <MudText Typo="Typo.h5">
                    IMDb rating by decade
                </MudText>
                <MudChart ChartType="ChartType.Line" 
                          XAxisLabels="@_decades"
                          ChartSeries="@_lineSeries" 
                          ChartOptions="@_lineChartOpts"
                          Width="100%" 
                          Height="350px" />
            </MudItem>
            <MudItem xs="12"
                     sm="6">
                <MudText Typo="Typo.h5">
                    Number of ratings by decade
                </MudText>
                <MudChart ChartType="ChartType.Pie" 
                          InputData="@_pieData"
                          InputLabels="@_decades" 
                          @bind-SelectedIndex="@_pieSelectedIndex"
                          Width="300px"
                          Height="300px" />
                <MudText Typo="Typo.h6">
                    @if (_pieData != null)
                    {
                        @($"Value: {(_pieSelectedIndex >= 0 ? _pieData[_pieSelectedIndex] : "")}%")
                    }
                </MudText>
            </MudItem>
        </MudGrid>
    </MudPaper>
}

@code {
    IEnumerable<MovieResponse>? _movies;
    readonly string[] _decades = {"50s", "60s", "70s", "80s", "90s", "00s", "10s", "20s"};
    readonly List<ChartSeries> _lineSeries = new();
    readonly ChartOptions _lineChartOpts = new();
    double[]? _pieData;
    int _pieSelectedIndex = -1;

    protected override async Task OnInitializedAsync()
    {
        _lineChartOpts.MaxNumYAxisTicks = 11;
        _lineChartOpts.YAxisTicks = 1;
        _lineChartOpts.YAxisLines = true;
        _lineChartOpts.XAxisLines = true;

        var result = await Http.GetFromJsonAsync<MovieResponse[]>("api/movie");
        if (result != null)
        {
            _movies = result;

            var averages = new List<double>();
            var medians = new List<double>();
            var minimums = new List<double>();
            var maximums = new List<double>();
            var pieData = new List<double>();

            for (var i = 1950; i < 2030; i += 10)
            {
                IEnumerable<double> ratings = _movies.Where(m => m.Year % i < 10).Select(m => m.IMDbRating).OrderBy(r => r).ToList();

                averages.Add(ratings.Average());
                medians.Add(ratings.Count() % 2 == 1 ?
                    ratings.ElementAt(ratings.Count() / 2) :
                    (ratings.ElementAt(ratings.Count() / 2 - 1) + ratings.ElementAt(ratings.Count() / 2)) / 2);
                minimums.Add(ratings.Min());
                maximums.Add(ratings.Max());

                pieData.Add(ratings.Count());
            }
            _lineSeries.Add(new ChartSeries() { Name = "Average", Data = averages.ToArray() });
            _lineSeries.Add(new ChartSeries() { Name = "Median", Data = medians.ToArray() });
            _lineSeries.Add(new ChartSeries() { Name = "Minimum", Data = minimums.ToArray() });
            _lineSeries.Add(new ChartSeries() { Name = "Maximum", Data = maximums.ToArray() });
            _pieData = pieData.ToArray();
        }

    }
}
