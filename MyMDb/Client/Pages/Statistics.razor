@page "/statistics"
@inject HttpClient Http

<PageTitle>Statistics</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true" Color="Color.Secondary" Class="mt-4" >Statistics</MudText>

@if (_movies == null)
{
    <MudProgressLinear Color="Color.Secondary" Indeterminate="true" />
}
else
{
    <MudPaper Class="pa-4" Elevation="10">
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudText Typo="Typo.h5">IMDb rating by decade</MudText>
                <MudChart ChartType="ChartType.Line" XAxisLabels="@_decades" ChartSeries="@_lineSeries" ChartOptions="@_lineChartOpts"
                    Width="100%" Height="350px"/>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudText Typo="Typo.h5">Number of ratings by decade</MudText>
                <MudChart ChartType="ChartType.Pie" InputData="@_pieData" InputLabels="@_decades" @bind-SelectedIndex="@_pieSelectedIndex"
                    Width="300px" Height="300px" />
                <MudText Typo="Typo.h6">@($"Value: {(_pieSelectedIndex >= 0 ? _pieData[_pieSelectedIndex] : "")}%")</MudText>
            </MudItem>
        </MudGrid>
    </MudPaper>
}

@code {
    private IEnumerable<MovieResponse>? _movies;
    private string[] _decades = {"50s", "60s", "70s", "80s", "90s", "00s", "10s", "20s"};
    private List<ChartSeries> _lineSeries = new List<ChartSeries>();
    private ChartOptions _lineChartOpts = new ChartOptions();
    private double[] _pieData;
    private int _pieSelectedIndex = -1;

    protected override async Task OnInitializedAsync()
    {
        _lineChartOpts.MaxNumYAxisTicks = 11;
        _lineChartOpts.YAxisTicks = 1;
        _lineChartOpts.YAxisLines = true;
        _lineChartOpts.XAxisLines = true;

        var result = await Http.GetFromJsonAsync<MovieResponse[]>("api/movie");
        if (result != null)
        {
            _movies = result;

            List<double> averages = new List<double>();
            List<double> medians = new List<double>();
            List<double> minimums = new List<double>();
            List<double> maximums = new List<double>();
            List<double> pieData = new List<double>();

            for (int i = 1950; i < 2030; i += 10)
            {
                IEnumerable<double> ratings = _movies.Where(m => m.Year % i < 10).Select(m => m.IMDbRating).OrderBy(r => r);

                averages.Add(ratings.Average());
                medians.Add(ratings.Count() % 2 == 1 ?
                    ratings.ElementAt(ratings.Count() / 2) :
                    (ratings.ElementAt(ratings.Count() / 2 - 1) + ratings.ElementAt(ratings.Count() / 2)) / 2);
                minimums.Add(ratings.Min());
                maximums.Add(ratings.Max());

                pieData.Add(ratings.Count());
            }
            _lineSeries.Add(new ChartSeries() { Name = "Average", Data = averages.ToArray() });
            _lineSeries.Add(new ChartSeries() { Name = "Median", Data = medians.ToArray() });
            _lineSeries.Add(new ChartSeries() { Name = "Minimum", Data = minimums.ToArray() });
            _lineSeries.Add(new ChartSeries() { Name = "Maximum", Data = maximums.ToArray() });
            _pieData = pieData.ToArray();
        }

    }
}
