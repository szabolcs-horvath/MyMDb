@page "/fetchdata"
@using MyMDb.Shared
@using System
@inject HttpClient Http

<PageTitle>Movies</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Movies</MudText>
<MudText Class="mb-8">This component demonstrates fetching data from the server.</MudText>
@if (movies == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="movies" Height="400px" Hover="true" SortLabel="Sort By" FixedHeader=true Virtualize="true" Filter="new Func<Movie, bool>(FilterCheck)">
        <ColGroup>
            <col />
            <col style="width: 12%" />
            <col style="width: 10%" />
            <col style="width: 10%" />
            <col style="width: 25%" />
            <col style="width: 12%" />
        </ColGroup>
        <ToolBarContent>
            <MudText Typo="Typo.h6">Movies</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="@searchTerm" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Movie, object>(x=>x.Title)">Title</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Movie, object>(x=>x.IMDbRating)">IMDb Rating</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Movie, object>(x=>x.Runtimemins)">Runtime</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Movie, object>(x=>x.Year)">Year</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Movie, object>(x=>x.Directors)">Director(s)</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Movie, object>(x=>x.ReleaseDate)">Release Date</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="IMDb Rating">@context.IMDbRating</MudTd>
            <MudTd DataLabel="Runtime">@context.Runtimemins</MudTd>
            <MudTd DataLabel="Year">@context.Year</MudTd>
            <MudTd DataLabel="Director(s)">@context.Directors</MudTd>
            <MudTd DataLabel="Release Date">@context.ReleaseDate</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10, 20, 50, 100}" />
        </PagerContent>
    </MudTable>
}

@code {
    private Movie[]? movies;
    private string searchTerm = string.Empty;

    private bool FilterCheck(Movie movie)
    {
        int parsedYear;
        bool parsingSucceeded = int.TryParse(searchTerm, out parsedYear);
        return movie.Title.Contains(searchTerm)
        || movie.Directors.Contains(searchTerm)
        || (parsingSucceeded && movie.Year == parsedYear);
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<Movie[]>("api/movie");
        if (result != null)
        {
            movies = result;
            //foreach (Movie m in movies)
            //{
            //    Console.Write($"{m.Title}'s Cast: ");
            //    foreach (Person p in m.Person)
            //    {
            //        Console.Write($"{p.FullName}, ");
            //    }
            //    Console.WriteLine();
            //}
        }
    }
}
