@page "/fetchdata"
@using System
@inject HttpClient Http

<PageTitle>Movies</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Movies</MudText>
<MudText Class="mb-8">This component demonstrates fetching data from the server.</MudText>
@if (movies == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="movies" Height="400px" Hover="true" SortLabel="Sort By" FixedHeader=true Virtualize="true" Filter="new Func<DisplayMovie, bool>(FilterCheck)">
        <ColGroup>
            <col />
            <col style="width: 12%" />
            <col style="width: 10%" />
            <col style="width: 10%" />
            <col style="width: 25%" />
            <col style="width: 12%" />
        </ColGroup>
        <ToolBarContent>
            <MudText Typo="Typo.h6">Movies</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="@searchTerm" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<DisplayMovie, object>(x=>x.Title)">Title</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<DisplayMovie, object>(x=>x.IMDbRating)">IMDb Rating</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<DisplayMovie, object>(x=>x.Runtimemins)">Runtime</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<DisplayMovie, object>(x=>x.Year)">Year</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<DisplayMovie, object>(x=>x.Directors)">Director(s)</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<DisplayMovie, object>(x=>x.ReleaseDate)">Release Date</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="IMDb Rating">@context.IMDbRating</MudTd>
            <MudTd DataLabel="Runtime">@context.Runtimemins</MudTd>
            <MudTd DataLabel="Year">@context.Year</MudTd>
            <MudTd DataLabel="Director(s)">@context.Directors</MudTd>
            <MudTd DataLabel="Release Date">@context.ReleaseDate</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10, 20, 50, 100}" />
        </PagerContent>
    </MudTable>
}

@code {
    private IEnumerable<DisplayMovie>? movies;
    private string searchTerm = string.Empty;

    private bool FilterCheck(DisplayMovie movie)
    {
        int parsedYear;
        bool parsingSucceeded = int.TryParse(searchTerm, out parsedYear);
        return movie.Title.Contains(searchTerm)
        || movie.Directors.Contains(searchTerm)
        || (parsingSucceeded && movie.Year == parsedYear);
    }

    public class DisplayMovie
    {
        public DisplayMovie(Movie value)
        {
            Title = value.Title ?? "";
            IMDbRating = value.IMDbRating ?? 0;
            Runtimemins = value.Runtimemins ?? 0;
            Year = value.Year ?? 0;
            Directors = value.Directors == null ? "" : string.Join(", ", value.Directors);
            ReleaseDate = value.ReleaseDate ?? "";
        }
        public string Title { get; }
        public double IMDbRating { get; }
        public int Runtimemins { get; }
        public int Year { get; }
        public string Directors { get; }
        public string ReleaseDate { get; }

    }

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<Movie[]>("api/movie");
        if (result != null)
        {
            List<DisplayMovie> temp = new List<DisplayMovie>(result.Length);
            foreach (Movie m in result) {
                temp.Add(new DisplayMovie(m));
            }
            movies = temp;
        }
    }
}
