@inherits LayoutComponentBase

<MudThemeProvider Theme="_themeManager.Theme" @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="_themeManager.AppBarElevation" >
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(() => DrawerToggle())" />
        <MudText Typo="Typo.h4" Class="fw-bolder">MyMDb</MudText>
        <MudSpacer />
        <MudTooltip Text="Switch Dark mode">
            <MudIconButton Icon="@Icons.Outlined.ModeNight" Color="Color.Inherit" OnClick="SwitchDarkMode" />
        </MudTooltip>
        <MudTooltip Text="MyMDb GitHub repository">
            <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Edge="Edge.End" Link="https://github.com/szabolcs-horvath/MyMDb" Target="_blank" />
        </MudTooltip>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="_themeManager.DrawerClipMode" Elevation="_themeManager.DrawerElevation"
        Variant="DrawerVariant.Mini" DisableOverlay="true" >
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" >
            @Body
        </MudContainer>
    </MudMainContent>

    <MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))" />
    <MudThemeManager Open="_themeManagerOpen" OpenChanged="OpenThemeManager" Theme="_themeManager" ThemeChanged="UpdateTheme" />
</MudLayout>

@code {
    bool _drawerOpen = true;
    private bool _isDarkMode = false;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private ThemeManagerTheme _themeManager = new ThemeManagerTheme();
    public bool _themeManagerOpen = false;

    void OpenThemeManager(bool value)
    {
        _themeManagerOpen = value;
    }

    void UpdateTheme(ThemeManagerTheme value)
    {
        _themeManager = value;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        StateHasChanged();
        _themeManager.DrawerClipMode = DrawerClipMode.Always;

        _themeManager.Theme.Palette.Background = new MudBlazor.Utilities.MudColor("264653");

        _themeManager.Theme.Palette.Primary = new MudBlazor.Utilities.MudColor("264653");
        _themeManager.Theme.Palette.Secondary = new MudBlazor.Utilities.MudColor("2a9d8f");

        _themeManager.Theme.Palette.AppbarBackground = new MudBlazor.Utilities.MudColor("6addcf");
        _themeManager.Theme.Palette.DrawerBackground = new MudBlazor.Utilities.MudColor("2a9d8f");
        _themeManager.Theme.Palette.DrawerText = new MudBlazor.Utilities.MudColor("ffffff");
        _themeManager.Theme.Palette.DrawerIcon = new MudBlazor.Utilities.MudColor("ffffff");

    }

    private void SwitchDarkMode()
    {
        _isDarkMode = !_isDarkMode;
    }
}